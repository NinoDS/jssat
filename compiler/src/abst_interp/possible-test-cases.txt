---
f(x):
    x["a"] = 1;
---
f(x):
    ret "a" in x;
---
f(x):
    ret f({ a: x });
---
f(x):
    x.i = x.i + 1;
    x[x.i] = "a";

x = { i: 0 }
loop {
    f(x)
}
---
f(x):
    if [[a]] in x {
        delete x.1;
        x.b = 1;
    } elif [[b]] in x {
        delete x.b;
        x.c = 1;
    } elif [[c]] in x {
        delete x.c;
        x.a = 1;
    }
    ret f(x);
---
x.y = y;
y.x = x;
---
f(x):
    x.a.b = 1
---
f():
    ret {}
g():
    x = f();
    y = f();
    x.a = 1;
    y.b = 2;
    ret (x, y);
---
function ski(p, s = [0]){
    const token = p[s[0]]
    s[0] += 1
    if(token == '0'){
        return ski(p,s)(ski(p,s));
    } else if(token == '1'){
        return x => y => x;
    } else if(token == '2'){
        return x => y => z => x(z)(y(z));
    }
}
console.log(ski("000200200211010020020121002110020020021101002002012100200201210020020121002002012100211010020020121002110020102002111")(x => x + 1)(0))
---
https://gist.github.com/SimonMeskens/aadd57b4adc952b2e878016d0b81598b
---
function sink(x) {
    while (x.x) {
        x = x.x;
    }
}
---

unit tests:
---
# i was setting the key as the element of the list
f(x):
    List(x)[0] <- "value"
    v <- List(x)[0]
    assert(v == "value")
---
# i had a faulty comparison for record/byte keys
f(x):
    Record(x)["key"] <- 0
    v <- Record(x)["key"]
    assert(v == 0)
---
# checking that calls update records
f(x):
    a <- {}
    Record(a)[0] <- "old value"
    # no "copy" instruction to copy a register because no point
    # to simulate a copy instruction, we put `a` in `b`
    b <- {}
    Record(b)[0] <- a
    # perform the call
    call modify(a)
    # now `a` should be updated
    assert(Record(a)[0] == "new value")
    # the register *a* might've been updated but not the record itself
    # check that references are updated
    another_a <- Record(b)[0]
    assert(Record(another_a)[0] == "new value")

modify(x):
    Record(x)[0] <- "new value"
---
# ran into weird copy issues with this
f():
    realm = {}
    Record(realm)[Realm] <- realm
    value <- g(realm)
    Record(realm)[Value] <- value

g(realm):
    obj = {}
    Record(obj)[Realm] <- realm
    return obj
---